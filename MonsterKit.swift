//
//  MonsterKit.swift
//  ProjectName
//
//  Created by CSinclair on 11/10/15.
//  Copyright (c) 2015 Femtolite. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class MonsterKit : NSObject {

    //// Drawing Methods

    public class func drawRestart() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let color = UIColor(red: 0.268, green: 0.164, blue: 0.084, alpha: 1.000)

        //// Image Declarations
        let livespanel = UIImage(named: "livespanel.png")!

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRectMake(78, 52, 63, 22))
        UIColor.grayColor().setFill()
        rectanglePath.fill()


        //// Picture Drawing
        let picturePath = UIBezierPath(rect: CGRectMake(0, -6, 468, 137))
        CGContextSaveGState(context)
        picturePath.addClip()
        livespanel.drawInRect(CGRectMake(0, -6, livespanel.size.width, livespanel.size.height))
        CGContextRestoreGState(context)


        //// Rectangle 2 Drawing
        let rectangle2Rect = CGRectMake(50, 15, 360, 100)
        let rectangle2Path = UIBezierPath(roundedRect: rectangle2Rect, cornerRadius: 20)
        color.setFill()
        rectangle2Path.fill()
        let rectangle2TextContent = NSString(string: "Restart")
        let rectangle2Style = NSParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        rectangle2Style.alignment = .Center

        let rectangle2FontAttributes = [NSFontAttributeName: UIFont(name: "PipeDream", size: 72)!, NSForegroundColorAttributeName: UIColor.whiteColor(), NSParagraphStyleAttributeName: rectangle2Style]

        let rectangle2TextHeight: CGFloat = rectangle2TextContent.boundingRectWithSize(CGSizeMake(rectangle2Rect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: rectangle2FontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, rectangle2Rect);
        rectangle2TextContent.drawInRect(CGRectMake(rectangle2Rect.minX, rectangle2Rect.minY + (rectangle2Rect.height - rectangle2TextHeight) / 2, rectangle2Rect.width, rectangle2TextHeight), withAttributes: rectangle2FontAttributes)
        CGContextRestoreGState(context)
    }

}
